//+------------------------------------------------------------------+
//|                                       ND_DataBase_s-Telegram.mq4 |
//|                                  Copyright 2023, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
//---
   
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+

extern string serverUrl = "http://localhost:3000";

void OnTick()
  {
//---
   string ordersString = ListOrders();
   Print(ordersString);
   SendPOSTToServers(serverUrl + "/orders", ListOrders());
  }
//+------------------------------------------------------------------+

void SendPOSTToServers(string url, string ordersString) {
   string cookie = NULL;
   string headers;
   char post[], result[];
   int timeout = 5000;
   
   StringToCharArray(ordersString, post, 0, -1, CP_UTF8);
   ArrayResize(post, ArraySize(post));
   
   ResetLastError();
   
   int res = WebRequest("POST", url, cookie, NULL, timeout, post, 0, result, headers);
   // int res = WebRequest("POST", url, headers, ListOrders(), StringLen(ListOrders()), result, headers, 5000);
   
   //if(res == -1) {
      //Print("Error:", GetLastError());
   //} else {
      //Print("Send orders to server successfully");
   //}
   
   if (res == -1) {
    Print("Lỗi yêu cầu HTTP. Mô tả lỗi: ", GetLastError());
   } else if (res == 200) {
       Print("Yêu cầu thành công! Dữ liệu trả về: 2222");
   } else {
       Print("Yêu cầu không thành công. Mã trả về: ", res);
   }
}
//+------------------------------------------------------------------+

string ListOrders() {
   string sLO = "{\"server\":\"HaHoangBin\",\"total\":\"{3}\"";
   int sum = RunningOrders(); // Tổng số lệnh đang chạy (SELL/BUY)
   
   if(sum == 0) {
      sum = sum + "}";   
   } else {
      string sLO = "{\"server\":\"HaHoangBin\",\"total\":\"{0}\"";
      // do cac lenh dang chay
      sLO += ", \"orders\":[";
      
      int orderNumber = 0;
      for(int pos=0; pos<OrdersTotal(); pos++) {
         if(OrderSelect(pos, SELECT_BY_POS) == false) continue;
         if(OrderType() == OP_BUY || OrderType() == OP_SELL) {
            orderNumber++;
         
            if(orderNumber > 1) {
               sLO += ",";
            }
            sLO += "{\"ticket\":\"[0]\", \"pair\":\"[1]\", \"direction\":\"[2]\", \"lot\":\"[3]\", \"price\":\"[4]\", \"sl\":\"[5]\", \"tp\":\"[6]\", \"timeopen\":\"[7]\", \"comment\":\"[8]\"}";
         }
         StringReplace(sLO, "{0}", sum);
         StringReplace(sLO, "[0]", OrderTicket());
         StringReplace(sLO, "[1]", OrderSymbol());
         StringReplace(sLO, "[2]", OrderType());
         StringReplace(sLO, "[3]", OrderLots());
         StringReplace(sLO, "[4]", OrderOpenPrice());
         StringReplace(sLO, "[5]", OrderStopLoss());
         StringReplace(sLO, "[6]", OrderTakeProfit());
         StringReplace(sLO, "[7]", OrderOpenTime());
         StringReplace(sLO, "[8]", OrderComment());
      }
      
      sLO += "]";
      
      sLO += "}";
   }
   return sLO;
}
//+------------------------------------------------------------------+

int RunningOrders() {
   int no = 0;
   for(int pos=0; pos<OrdersTotal(); pos++) {
      if(OrderSelect(pos, SELECT_BY_POS) == false) {
         continue;
      }
      if(OrderType() == OP_BUY || OrderType() == OP_SELL) {
         if(MathAbs(OrderStopLoss())>0 && MathAbs(OrderTakeProfit())>0) {
            if(MathAbs(OrderStopLoss()-OrderOpenPrice()) < MathAbs(OrderTakeProfit()-OrderOpenPrice()) ) {
               no = no + 1;
            }
         }
      }
   }
   return no;
}
