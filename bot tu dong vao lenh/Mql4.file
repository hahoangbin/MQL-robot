//+------------------------------------------------------------------+
//|                                                     ND_BOST1.mq4 |
//|                                  Copyright 2023, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+

input int      Magic        = 0;
input double   khoiluong    = 1;
input int      sodiemSL     = 2000;
input int      sodiemTP     = 2000;

input int      epsilon_inp  = 1000; //epsilon Point
input double   tile_doji    = 5.5;// Ti Le DoJi    
input double   tile_pinbar  = 3.5;// Ti Le Pinbar
input int      MA1_period   = 9;
input int      MA2_period   = 18;
input int      MA3_period   = 99;
input int      RSI_period   = 14;

//+------------------------------------------------------------------+
int OnInit()
  {
//---
   
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//--- 
   //---Bien
     bool     vaolenhSELL       = false;
     bool     vaolenhBUY        = false;
     bool     doji              = false;
     bool     pinbar            = false;
     double   body              = MathAbs(Open[1]-Close[1]);
     double   candle            = High[1] - Low[1];
     double   epsilon           = epsilon_inp * Point;
     double   Shadow_Upper      = 0;
     double   Shadow_Lower      = 0;
     string   signal            = "";
  //Doji
     if (body < epsilon && candle / body > tile_doji && doji == false) doji = true;
  //PINBAR
     if (Nen(1) == "Nen_Tang") { Shadow_Upper = High[1] - Close[1]; Shadow_Lower = Open[1] - Low[1]; }
     if (Nen(1) == "Nen_Giam") { Shadow_Upper = High[1] - Open[1]; Shadow_Lower = Close[1] - Low[1]; }
     if (body > epsilon && Shadow_Upper / body > tile_pinbar && Shadow_Lower < epsilon && pinbar == false) pinbar = true;
  //INSIDEBAR - OUTSIDEBAR
     bool insideBar = false;
     double candle_1 = High[1] - Low[1];
     double candle_2 = High[2] - Low[2];
     
  //Duong MA
     double MA1_N0  = iMA(NULL,Period(),MA1_period,0,MODE_EMA,PRICE_CLOSE,0);
     double MA2_N0  = iMA(NULL,Period(),MA2_period,0,MODE_EMA,PRICE_CLOSE,0);
     double MA3_N0  = iMA(NULL,Period(),MA3_period,0,MODE_EMA,PRICE_CLOSE,0);
     double MA1_N1  = iMA(NULL,Period(),MA1_period,0,MODE_EMA,PRICE_CLOSE,1);
     double MA2_N1  = iMA(NULL,Period(),MA2_period,0,MODE_EMA,PRICE_CLOSE,1);
     double MA3_N1  = iMA(NULL,Period(),MA3_period,0,MODE_EMA,PRICE_CLOSE,1);
     if (MA1_N1 >= MA2_N1 && MA1_N0 < MA2_N0) signal = "OP_SELL";
     if (MA1_N1 <= MA2_N1 && MA1_N0 > MA2_N0) signal = "OP_BUY";
  //RSI 
     double RSI_0  = iRSI(Symbol(),Period(),RSI_period,PRICE_CLOSE,0);
     double RSI_1  = iRSI(Symbol(),Period(),RSI_period,PRICE_CLOSE,1);
     if (RSI_0 < 20) signal = "OP_SELL";
     if (RSI_0 > 80) signal = "OP_BUY";
  //Tim gia cao nhat & thap nhat ngay hom truoc
     double Price_Highest  = NormalizeDouble(High[iHighest(Symbol(),PERIOD_D1,MODE_HIGH,1,1)],Digits);
     double Price_Lowest   = NormalizeDouble(Low[iLowest(Symbol(),PERIOD_D1,MODE_LOW,1,1)],Digits);
   
     if (CountOrders("OP_SELL",Magic)== 0 && vaolenhSELL == false) vaolenhSELL = true;
     if (CountOrders("OP_BUY",Magic)== 0 && vaolenhBUY == false) vaolenhBUY = true;
     if (
           Nen(2) == "Nen_Tang" 
           && Nen(3) == "Nen_Tang" 
           && Nen(4) == "Nen_Tang" 
           && vaolenhSELL == true 
           && NewCandle()
           && signal == "OP_SELL"
           && (
                  (doji == true || pinbar == true)
               || (signal == "OP_SELL")
              )
        )
     {
        int Sell = OrderSend(Symbol(),OP_SELL,khoiluong,Bid,3,0,Bid-sodiemTP*Point,NULL,0,0,clrRed);
        vaolenhSELL = false;
        
     }
// +---------------------------------------------------------------------------------------------------------------------------------------------
     if (
           Nen(2) == "Nen_Giam" 
           && Nen(3) == "Nen_Giam" 
           && Nen(4) == "Nen_Giam" 
           && vaolenhBUY == true 
           && NewCandle()
           && signal == "OP_BUY"
           && (
                  (doji == true || pinbar == true)
               || (signal == "OP_BUY")
              )
        )
     {
        int Buy = OrderSend(Symbol(),OP_BUY,khoiluong,Ask,3,0,Ask+sodiemTP*Point,NULL,0,0,clrAqua);
        vaolenhBUY = false;

         ObjectCreate("ObjName", OBJ_LABEL, 0, 0, 0);
         ObjectSetText("ObjName","your Text",7, "Verdana", Red);
         ObjectSet("ObjName", OBJPROP_CORNER, 0);
         ObjectSet("ObjName", OBJPROP_XDISTANCE, 20);
         ObjectSet("ObjName", OBJPROP_YDISTANCE, 20);
     }
     
     
  }
//+------------------------------------------------------------------+
string Nen (int thutunen)
{
   if (Open[thutunen] < Close[thutunen]) return "Nen_Tang";
   else return "Nen_Giam";
}
//+------------------------------------------------------------------+
int CountOrders(string type, int magic)
{
   int count = 0;
   
   for (int i = OrdersTotal() - 1; i >= 0; i--)
	 {
	 	RefreshRates();	 	
	   if (OrderSelect(i,SELECT_BY_POS))
	   {
	      if (OrderMagicNumber() == magic && OrderSymbol() == Symbol())
	      {
	         if(type=="All")
	            count ++;
	         if(type=="AllLimitStop" && OrderType()>1)
	            count ++;
	         if(type=="OP_BUY" && OrderType()==0)
	            count ++;
	         if(type=="OP_SELL" && OrderType()==1)
	            count ++;
	         if(type=="OP_BUYLIMIT" && OrderType()==2)
	            count ++;
	         if(type=="OP_SELLLIMIT" && OrderType()==3)
	            count ++;
	         if(type=="OP_BUYSTOP" && OrderType()==4)
	            count ++;
	         if(type=="OP_SELLSTOP" && OrderType()==5)
	            count ++;
	      }
	      if (OrderSymbol() == Symbol())
	      {
	         if(type=="AllAllOneSymbol")
	            count ++;
	         if(type=="AllLimitStopOneSymbol" && OrderType()>1)
	            count ++;
	         if(type=="OP_BUYOneSymbol" && OrderType()==0)
	            count ++;
	         if(type=="OP_SELLOneSymbol" && OrderType()==1)
	            count ++;
	         if(type=="OP_BUYLIMITOneSymbol" && OrderType()==2)
	            count ++;
	         if(type=="OP_SELLLIMITOneSymbol" && OrderType()==3)
	            count ++;
	         if(type=="OP_BUYSTOPOneSymbol" && OrderType()==4)
	            count ++;
	         if(type=="OP_SELLSTOPOneSymbol" && OrderType()==5)
	            count ++;
	      }
	     if (type=="AllAllAll")
	     count ++;
	   }	
	}   
   return count;
}
//+------------------------------------------------------------------+
bool NewCandle()
{
   static datetime NewBar = 0;
   bool            re     = false;
   if(Time[0] != NewBar)
     {
      NewBar = Time[0];
      re = true;
     }
   return re;
}
//+------------------------------------------------------------------+
